/*
    One benefit of external CSS is that multiple HTML pages can link to the same CSS file.
    If we make a change to the CSS, styling will update for each page.
    Designating an HTML file for the structure of the page, a CSS file for the styling,
    and JavaScript file for interaction or events is called "separation of concerns".

    We can also write CSS directly in HTML, which is called internal CSS.
    Even for a basic website, there are so many CSS rules the HTML page can become
    cluttered very quickly. With more than one page, the same CSS would often be repeated
    and challenging to manage.
*/
body {
    font-family: monospace;
}

ul {
    font-family: Helvetica;
}

/*
CSS rules to style HTML:
    The unordered list element ul {} is a selector, which selects the <ul> HTML element to apply styles.
    The declaration is font-family: helvetica and determines what the style should be.
    The property name is font-family, and the value is helvetica.
    The property and value together make a key-value pair.
*/

/*
Selectors:
    ID and class are called selectors; they enable us to apply styles to custom attribute names in our HTML.
    NOTE-1:
            An ID is used to style one element.
    NOTE-2:
            Whereas classes can style multiple elements."
*/

li {
    list-style: circle;
}

.list {
    list-style: square;
}

/* #msg {
    font-family: monospace;
} */

/*
The preceding custom attributes are called .list and #msg.

The period prefix for .list indicates that this is a class selector.

Each HTML element that contains a class attribute set to "list" will inherit the styles
that are defined within this selector.

The pound sign prefix for #msg indicates that this is an ID selector.

The HTML element that has its id attribute set to "msg" will inherit the styles that are
defined within this selector.

The names that we use for our selectors can be arbitrary, as long as they match what we've
defined in the HTML.
*/

/* Adding a LIGHT Theme */
.light-theme {
    color: #000000;
    background: #00FF00;
}
/* #000000 specifies black for the font color, and #00FF00 specifies green for the background color. */

/* Adding a DARK Theme */
:root {
    --green: #00FF00;
    --white: #ffffff;
    --black: #000000;
  }
/* The :root selector represents the <html> element in the HTML page. For this kind of task,
a best practice is to define a set of global CSS variables in the :root element.
In this example, we've defined three color variables that are attached to the page root. */

.light-theme {
    --bg: var(--green);
    --fontColor: var(--black);
}
.dark-theme {
    --bg: var(--black);
    --fontColor: var(--green);
}
/* In the preceding code, we defined some new variables:
bg and fontColor, to specify the background color and font color.
var keyword to specify variables to use as the property values.
We set the values previously in our :root selector. */

* {
    color: var(--fontColor);
    font-family: helvetica;
  }
body {
    background: var(--bg);
}
/* The * selector is a universal selector that applies to all page elements
(except where a more specific element selector overrides it). In this example,
we use the * selector to set the default color property for all page elements.
For the color and background properties, we specify the variables defined in
the light and dark theme selectors. */

.btn {
    color: var(--btnFontColor);
    background-color: var(--btnbg);
}
.btn {
    position: absolute;
    top: 20px;
    left: 250px;
    height: 50px;
    width: 50px;
    border-radius: 50%;
    border: none;
    color: var(--btnFontColor);
    background-color: var(--btnBg);
}

/* To improve the button's appearance, add a pseudo-class selector, btn:focus,
after the button selector. By setting the outline-style rule to none, we eliminate
a rectangular outline when the button is selected (receives focus). */

.btn:focus { outline-style: none; }

.light-theme {
    --bg: var(--green);
    --fontColor: var(--black);
    --btnBg: var(--black);
    --btnFontColor: var(--white);
}
  
.dark-theme {
    --bg: var(--black);
    --fontColor: var(--green);
    --btnBg: var(--white);
    --btnFontColor: var(--black);
}

/* Adding an event handler */
/* To make the button do something when we select it, we need an event handler in our
JavaScript file. For a button, we need an event handler for the click event;
the event handler function runs when the click event occurs. */

